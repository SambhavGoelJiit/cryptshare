/**
 * Register an "upload" with the service. The issuer needs the `upload/add`
 * delegated capability.
 *
 * Required delegated capability proofs: `upload/add`
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `upload/add` delegated capability.
 * @param {import('multiformats/link').UnknownLink} root Root data CID for the DAG that was stored.
 * @param {import('./types.js').CARLink[]} shards CIDs of CAR files that contain the DAG.
 * @param {import('./types.js').RequestOptions} [options]
 * @returns {Promise<import('./types.js').UploadAddSuccess>}
 */
export function add({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, root: import('multiformats/link').UnknownLink, shards: import('./types.js').CARLink[], options?: import("./types.js").RequestOptions | undefined): Promise<import('./types.js').UploadAddSuccess>;
/**
 * Get details of an "upload".
 *
 * Required delegated capability proofs: `upload/get`
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `upload/get` delegated capability.
 * @param {import('multiformats/link').UnknownLink} root Root data CID for the DAG that was stored.
 * @param {import('./types.js').RequestOptions} [options]
 * @returns {Promise<import('./types.js').UploadGetSuccess>}
 */
export function get({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, root: import('multiformats/link').UnknownLink, options?: import("./types.js").RequestOptions | undefined): Promise<import('./types.js').UploadGetSuccess>;
/**
 * List uploads created by the issuer.
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `upload/list` delegated capability.
 * @param {import('./types.js').ListRequestOptions} [options]
 * @returns {Promise<import('./types.js').UploadListSuccess>}
 */
export function list({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, options?: import("./types.js").ListRequestOptions | undefined): Promise<import('./types.js').UploadListSuccess>;
/**
 * Remove an upload by root data CID.
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `upload/remove` delegated capability.
 * @param {import('multiformats').UnknownLink} root Root data CID to remove.
 * @param {import('./types.js').RequestOptions} [options]
 */
export function remove({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, root: import('multiformats').UnknownLink, options?: import("./types.js").RequestOptions | undefined): Promise<import("@web3-storage/capabilities/types").UploadAddSuccess>;
//# sourceMappingURL=upload.d.ts.map