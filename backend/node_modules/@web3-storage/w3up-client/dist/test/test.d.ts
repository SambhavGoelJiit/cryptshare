/// <reference types="node" resolution-mode="require"/>
export function test(suite: Suite | Record<string, Suite>): void;
export function setup(): Promise<{
    connect: () => Promise<Client.Client>;
    client: Client.Client;
    connection: import("@ucanto/interface").ConnectionView<import("@web3-storage/upload-api/types").Service>;
    mail: import("@web3-storage/upload-api/types").DebugEmail;
    service: import("@ucanto/interface").Signer<`did:web:${string}`, import("@ipld/dag-ucan").SigAlg>;
    fetch: typeof fetch;
    grantAccess: (mail: {
        url: string | URL;
    }) => Promise<void>;
    id: import("@ucanto/interface").Signer<`did:${string}:${string}`, import("@ipld/dag-ucan").SigAlg>;
    codec?: import("@ucanto/interface").InboundCodec | undefined;
    errorReporter: import("@web3-storage/upload-api/types").ErrorReporter;
    delegationsStorage: import("@web3-storage/upload-api/types").DelegationsStorage<import("@ipld/dag-ucan").Capability<import("@ipld/dag-ucan").Ability, `${string}:${string}`, unknown>>;
    signer: import("@ucanto/interface").Signer<`did:${string}:${string}`, import("@ipld/dag-ucan").SigAlg>;
    email: import("@web3-storage/upload-api/types").Email;
    url: URL;
    provisionsStorage: import("@web3-storage/upload-api/types").ProvisionsStorage<`did:web:${string}`>;
    rateLimitsStorage: import("@web3-storage/upload-api/types").RateLimitsStorage;
    plansStorage: import("@web3-storage/upload-api/types").PlansStorage;
    requirePaymentPlan?: boolean | undefined;
    maxUploadSize: number;
    storeTable: import("@web3-storage/upload-api/types").StoreTable;
    carStoreBucket: import("@web3-storage/upload-api/types").CarStoreBucket;
    subscriptionsStorage: import("@web3-storage/upload-api/types").SubscriptionsStorage;
    revocationsStorage: import("@web3-storage/upload-api/types").RevocationsStorage;
    uploadTable: import("@web3-storage/upload-api/types").UploadTable;
    dudewhereBucket: import("@web3-storage/upload-api/types").DudewhereBucket;
    aggregatorId: import("@ipld/dag-ucan").Principal<`did:${string}:${string}`>;
    pieceStore: import("@web3-storage/filecoin-api/storefront/api").PieceStore;
    filecoinSubmitQueue: import("@web3-storage/filecoin-api/storefront/api").FilecoinSubmitQueue;
    pieceOfferQueue: import("@web3-storage/filecoin-api/storefront/api").PieceOfferQueue;
    taskStore: import("@web3-storage/filecoin-api/storefront/api").TaskStore;
    receiptStore: import("@web3-storage/filecoin-api/storefront/api").ReceiptStore;
    dealTrackerService: import("@web3-storage/filecoin-api/types").ServiceConfig<import("@web3-storage/filecoin-client/types").DealTrackerService>;
    options?: import("@web3-storage/filecoin-api/storefront/api").ServiceOptions | undefined;
    usageStorage: import("@web3-storage/upload-api/types").UsageStorage;
    validateAuthorization: (authorization: import("@ucanto/interface").Authorization<import("@ucanto/interface").ParsedCapability<import("@ipld/dag-ucan").Ability, import("@ucanto/interface").URI, {}>>) => import("@ucanto/interface").Await<import("@ucanto/interface").Result<import("@ucanto/interface").Unit, import("@ucanto/interface").Revoked>>;
}>;
export type Assert = Omit<typeof assert, "ok"> & {
    ok(value: unknown, message?: string): void;
};
export type Suite = {
    [x: string]: (assert: Assert, context: Awaited<ReturnType<() => Promise<{
        connect: () => Promise<Client.Client>;
        client: Client.Client;
        connection: import("@ucanto/interface").ConnectionView<import("@web3-storage/upload-api/types").Service>;
        mail: import("@web3-storage/upload-api/types").DebugEmail;
        service: import("@ucanto/interface").Signer<`did:web:${string}`, import("@ipld/dag-ucan").SigAlg>;
        fetch: typeof fetch;
        grantAccess: (mail: {
            url: string | URL;
        }) => Promise<void>;
        id: import("@ucanto/interface").Signer<`did:${string}:${string}`, import("@ipld/dag-ucan").SigAlg>;
        codec?: import("@ucanto/interface").InboundCodec | undefined;
        errorReporter: import("@web3-storage/upload-api/types").ErrorReporter;
        delegationsStorage: import("@web3-storage/upload-api/types").DelegationsStorage<import("@ipld/dag-ucan").Capability<import("@ipld/dag-ucan").Ability, `${string}:${string}`, unknown>>;
        signer: import("@ucanto/interface").Signer<`did:${string}:${string}`, import("@ipld/dag-ucan").SigAlg>;
        email: import("@web3-storage/upload-api/types").Email;
        url: URL;
        provisionsStorage: import("@web3-storage/upload-api/types").ProvisionsStorage<`did:web:${string}`>;
        rateLimitsStorage: import("@web3-storage/upload-api/types").RateLimitsStorage;
        plansStorage: import("@web3-storage/upload-api/types").PlansStorage;
        requirePaymentPlan?: boolean | undefined;
        maxUploadSize: number;
        storeTable: import("@web3-storage/upload-api/types").StoreTable;
        carStoreBucket: import("@web3-storage/upload-api/types").CarStoreBucket;
        subscriptionsStorage: import("@web3-storage/upload-api/types").SubscriptionsStorage;
        revocationsStorage: import("@web3-storage/upload-api/types").RevocationsStorage;
        uploadTable: import("@web3-storage/upload-api/types").UploadTable;
        dudewhereBucket: import("@web3-storage/upload-api/types").DudewhereBucket;
        aggregatorId: import("@ipld/dag-ucan").Principal<`did:${string}:${string}`>;
        pieceStore: import("@web3-storage/filecoin-api/storefront/api").PieceStore;
        filecoinSubmitQueue: import("@web3-storage/filecoin-api/storefront/api").FilecoinSubmitQueue;
        pieceOfferQueue: import("@web3-storage/filecoin-api/storefront/api").PieceOfferQueue;
        taskStore: import("@web3-storage/filecoin-api/storefront/api").TaskStore;
        receiptStore: import("@web3-storage/filecoin-api/storefront/api").ReceiptStore;
        dealTrackerService: import("@web3-storage/filecoin-api/types").ServiceConfig<import("@web3-storage/filecoin-client/types").DealTrackerService>;
        options?: import("@web3-storage/filecoin-api/storefront/api").ServiceOptions | undefined;
        usageStorage: import("@web3-storage/upload-api/types").UsageStorage;
        validateAuthorization: (authorization: import("@ucanto/interface").Authorization<import("@ucanto/interface").ParsedCapability<import("@ipld/dag-ucan").Ability, import("@ucanto/interface").URI, {}>>) => import("@ucanto/interface").Await<import("@ucanto/interface").Result<import("@ucanto/interface").Unit, import("@ucanto/interface").Revoked>>;
    }>>>) => unknown;
};
import * as Client from '@web3-storage/w3up-client';
import * as assert from 'assert';
//# sourceMappingURL=test.d.ts.map