export * from "./api.js";
export { Path };
export const bitWidth: 8;
export namespace config {
    export { bitWidth };
    export const Path: HAMT.Path<Uint8Array>;
}
export function tableSize(hamt: HAMT.PersistentHashMap): number;
export function empty<T = unknown, K extends string = string, C extends HAMT.Config<any, any> = HAMT.Config<Uint8Array, Uint8Array>>(options?: Partial<C>): HAMT.PersistentHashMap<T, K, C>;
export function builder<T = unknown, K extends string = string, C extends HAMT.Config<any, any> = HAMT.Config<Uint8Array, Uint8Array>>(options?: Partial<C>): HAMT.HashMapBuilder<T, K, C>;
export function from<V = unknown, K extends string = string, C extends HAMT.Config<any, any> = HAMT.Config<Uint8Array, Uint8Array>>(entries: Iterable<[K, V]>, options?: Partial<C>): HAMT.PersistentHashMap<V, K, C>;
export function bitField<T, K extends string, Bits, Bitmap>({ datamap, nodemap, config: { BitField } }: HAMT.BitmapIndexedNode<T, K, HAMT.Config<Bits, Bitmap>>): Uint8Array;
export function iterate<T, K extends string, C extends HAMT.Config<any, any>>(root: HAMT.BitmapIndexedNode<T, K, C>): IterableIterator<{
    prefix: string;
    key: K;
    value: T;
    node?: void | undefined;
} | {
    prefix: string;
    node: HAMT.BitmapIndexedNode<T, K, C>;
}>;
import * as Path from "./path/InfiniteUint8Array.js";
import * as HAMT from "./lib.js";
//# sourceMappingURL=unixfs.d.ts.map