export * from "./unixfs.js";
export const DEFAULT_FILE_MODE: number;
export const DEFAULT_DIRECTORY_MODE: number;
export const code: 112;
export const name: "UnixFS";
export function createRaw(content: Uint8Array): UnixFS.Raw;
export function createEmptyFile(metadata?: UnixFS.Metadata | undefined): UnixFS.SimpleFile;
export function createSimpleFile(content: Uint8Array, metadata?: UnixFS.Metadata | undefined): UnixFS.SimpleFile;
export function createFileChunk(content: Uint8Array): UnixFS.FileChunk;
export function createAdvancedFile(parts: UnixFS.FileLink[], metadata?: UnixFS.Metadata | undefined): UnixFS.AdvancedFile;
export function createFileShard(parts: UnixFS.FileLink[]): UnixFS.FileShard;
export function createComplexFile(content: Uint8Array, parts: UnixFS.FileLink[], metadata?: UnixFS.Metadata | undefined): UnixFS.ComplexFile;
export function createFlatDirectory(entries: UnixFS.DirectoryEntryLink[], metadata?: UnixFS.Metadata | undefined): UnixFS.FlatDirectory;
export function createShardedDirectory(entries: UnixFS.ShardedDirectoryLink[], bitfield: Uint8Array, fanout: number, hashType: number, metadata?: UnixFS.Metadata | undefined): UnixFS.ShardedDirectory;
export function createDirectoryShard(entries: UnixFS.ShardedDirectoryLink[], bitfield: Uint8Array, fanout: number, hashType: number): UnixFS.DirectoryShard;
export function encodeRaw(content: Uint8Array): UnixFS.ByteView<UnixFS.Raw>;
export function encodeFile(node: UnixFS.File | UnixFS.FileChunk | UnixFS.FileShard, ignoreMetadata?: boolean | undefined): UnixFS.ByteView<UnixFS.SimpleFile | UnixFS.AdvancedFile | UnixFS.ComplexFile>;
export function encodeFileChunk(content: Uint8Array): UnixFS.ByteView<UnixFS.FileChunk>;
export function encodeFileShard(parts: ReadonlyArray<UnixFS.FileLink>): UnixFS.ByteView<UnixFS.FileShard>;
export function encodeAdvancedFile(parts: ReadonlyArray<UnixFS.FileLink>, metadata?: UnixFS.Metadata | undefined): UnixFS.ByteView<UnixFS.AdvancedFile>;
export function encodeLink(dag: UnixFS.DAGLink): UnixFS.PBLink;
export function encodeSimpleFile(content: Uint8Array, metadata?: UnixFS.Metadata | undefined): UnixFS.ByteView<UnixFS.SimpleFile>;
export function encodeComplexFile(content: Uint8Array, parts: ReadonlyArray<UnixFS.FileLink>, metadata?: UnixFS.Metadata | undefined): UnixFS.ByteView<UnixFS.ComplexFile>;
export function encodeDirectory(node: UnixFS.FlatDirectory): UnixFS.ByteView<UnixFS.FlatDirectory>;
export function encodeHAMTShard({ bitfield, fanout, hashType, entries, metadata, }: UnixFS.ShardedDirectory | UnixFS.DirectoryShard): UnixFS.ByteView<UnixFS.ShardedDirectory>;
export function createSymlink(path: Uint8Array, metadata?: UnixFS.Metadata | undefined): UnixFS.Symlink;
export function encodeSymlink(node: UnixFS.Symlink, ignoreMetadata?: boolean | undefined): UnixFS.ByteView<UnixFS.Symlink>;
export function encode<T extends UnixFS.Node>(node: T, root?: boolean): UnixFS.ByteView<UnixFS.Raw> | UnixFS.ByteView<UnixFS.SimpleFile | UnixFS.AdvancedFile | UnixFS.ComplexFile> | UnixFS.ByteView<UnixFS.FlatDirectory> | UnixFS.ByteView<UnixFS.ShardedDirectory> | UnixFS.ByteView<UnixFS.Symlink>;
export function decode(bytes: UnixFS.ByteView<UnixFS.Node>): UnixFS.Node;
export function cumulativeContentByteLength(links: ReadonlyArray<UnixFS.FileLink>): number;
export function cumulativeDagByteLength(root: Uint8Array, links: ReadonlyArray<UnixFS.DAGLink>): number;
export function encodeDirectoryMetadata(metadata: UnixFS.Metadata): {
    mode: number | undefined;
    mtime: {
        Seconds: number;
        FractionalNanoseconds: number | undefined;
    } | {
        Seconds: number;
        FractionalNanoseconds?: undefined;
    } | undefined;
};
export function encodeMetadata({ mode, mtime }: UnixFS.Metadata, defaultMode?: UnixFS.Mode): {
    mode: number | undefined;
    mtime: {
        Seconds: number;
        FractionalNanoseconds: number | undefined;
    } | {
        Seconds: number;
        FractionalNanoseconds?: undefined;
    } | undefined;
};
export function decodeMetadata(data?: UnixFS.Metadata | undefined): Readonly<{}>;
export function encodeMode(specifiedMode: number, defaultMode: number): number | undefined;
export function matchFile({ content, parts, metadata, ...rest }: {
    content?: Uint8Array;
    parts?: ReadonlyArray<UnixFS.FileLink>;
    metadata?: UnixFS.Metadata;
}): UnixFS.SimpleFile | UnixFS.AdvancedFile | UnixFS.ComplexFile;
export function filesize(node: UnixFS.File | UnixFS.Raw | UnixFS.FileChunk | UnixFS.FileShard | UnixFS.Symlink): number;
import * as UnixFS from "./unixfs.js";
//# sourceMappingURL=codec.d.ts.map