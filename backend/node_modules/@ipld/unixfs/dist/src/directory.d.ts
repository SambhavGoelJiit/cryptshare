export * from "./directory/api.js";
export const configure: <Layout extends unknown>(config: Partial<API.EncoderSettings<Layout>>) => API.EncoderSettings<Layout>;
export const defaults: () => API.EncoderSettings<any>;
export function create<Layout = unknown>({ writer, settings, metadata }: API.Options<Layout>): API.View<Layout>;
export function set<L extends unknown, View extends {
    state: API.State<L>;
}>(view: View, name: string, link: API.EntryLink, { overwrite }?: API.WriteOptions): View;
export function remove<L extends unknown, View extends {
    state: API.State<L>;
}>(view: View, name: string): View;
export function close<Layout extends unknown>(view: {
    state: API.State<Layout>;
}, { closeWriter, releaseLock }?: API.CloseOptions): Promise<UnixFS.DirectoryLink>;
export function links<Layout extends unknown>({ state }: {
    state: API.State<Layout>;
}): IterableIterator<UnixFS.DirectoryEntryLink>;
export function fork<L1, L2>({ state }: API.View<L1>, { writer, metadata, settings, }?: Partial<API.Options<L1 | L2>>): API.View<L1 | L2>;
import * as API from "./directory/api.js";
import * as UnixFS from "./codec.js";
//# sourceMappingURL=directory.d.ts.map