export * from "./api.js";
export function createWriter<Layout = unknown>({ writable, settings }: API.Options<Layout>): API.View<Layout>;
export function close<View extends {
    writer: API.BlockWriter;
}>(view: View, { releaseLock, closeWriter }?: API.CloseOptions): Promise<View>;
export const BLOCK_SIZE_LIMIT: 1048576;
export const defaultCapacity: number;
export function withCapacity(byteLength?: number): Required<QueuingStrategy<API.Block>>;
import * as API from "./api.js";
export { encode, decode, NodeType, code } from "./codec.js";
export { create as createFileWriter, close as closeFile, write, configure, defaults, UnixFSLeaf, UnixFSRawLeaf } from "./file.js";
export { create as createDirectoryWriter, close as closeDirectory, fork as forkDirectory, set, remove } from "./directory.js";
export { create as createShardedDirectoryWriter, close as closeShardedDirectory, fork as forkShardedDirectory } from "./sharded-directory.js";
//# sourceMappingURL=lib.d.ts.map