export function readPayload<C extends UCAN.Capabilities>(data: Record<string, unknown> | UCAN.Payload<C>): UCAN.Payload<C>;
export function readJWTPayload<C extends UCAN.Capabilities>(data: Record<string, unknown> | UCAN.Payload<C>): UCAN.Payload<C>;
export function readSignature<T extends unknown, A extends number>(source: unknown): UCAN.SignatureView<unknown, number>;
export function readInt(input: unknown, name: string): number;
export function readCapability(input: unknown, context: string): UCAN.Capability<UCAN.Ability, `${string}:${string}`, any>;
export function readCapabilities<C extends UCAN.Capabilities>(input: unknown, context: string): C;
export function asCapability<C extends UCAN.Capability<UCAN.Ability, `${string}:${string}`, any>>(input: C | (object & {
    can?: unknown;
    with?: unknown;
})): C;
export function readArray<T>(input: unknown, read: (input: unknown, context: string) => T, context: string): T[];
export function readOptionalArray<T>(input: unknown, reader: (input: unknown, context: string) => T, context: string): T[] | undefined;
export function readStruct<T>(input: unknown, reader: (input: object) => T, context: string): T;
export function readFact(input: unknown, context: string): UCAN.Fact;
export function readProof(source: unknown, context: string): UCAN.Link;
export function readStringProof(source: unknown, context: string): UCAN.Link;
export function readPrincipal(input: unknown, context: string): UCAN.PrincipalView<`did:${string}:${string}`>;
export function readStringPrincipal(source: unknown, context: string): UCAN.PrincipalView<`did:${string}:${string}`>;
export function readOptional<T>(source: unknown, read: (source: unknown, context: string) => T, context?: string | undefined): T | undefined;
export function readNullable<T>(source: unknown, read: (source: unknown, context: string) => T, context: string): T | null;
export function readString(source: unknown, context?: string | undefined): string;
export function readBytes(source: unknown, context: string): Uint8Array;
export function readVersion(input: unknown, context: string): UCAN.Version;
export function readLiteral<T extends string | number | boolean | null>(input: unknown, literal: T, context: string): T;
export class ParseError extends TypeError {
    /**
     * @param {string} message
     * @returns {never}
     */
    static throw(message: string): never;
    get name(): string;
}
export function fail(reason: string): never;
import * as UCAN from "./ucan.js";
import * as Signature from "./signature.js";
import * as Link from "multiformats/dist/types/src/link.js";
export { fail as throw, _throw as throw };
//# sourceMappingURL=schema.d.ts.map