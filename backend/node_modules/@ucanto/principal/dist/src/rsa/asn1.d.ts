export const INT_TAG: 2;
export const BITSTRING_TAG: 3;
export const OCTET_STRING_TAG: 4;
export const NULL_TAG: 5;
export const OBJECT_TAG: 6;
export const SEQUENCE_TAG: 48;
export const UNUSED_BIT_PAD: 0;
export function encodeDERLength(length: number): Uint8Array;
export function readDERLength(bytes: Uint8Array, offset?: number): {
    number: number;
    consumed: number;
};
export function skip(input: Uint8Array, expectedTag: number, position: number): number;
export function into(input: Uint8Array, expectedTag: number, offset: number): {
    position: number;
    length: number;
};
export function encodeBitString(input: Uint8Array): Uint8Array;
export function encodeOctetString(input: Uint8Array): Uint8Array;
export function encodeSequence(sequence: Uint8Array[]): Uint8Array;
export function readSequence(bytes: Uint8Array, offset?: number): Uint8Array;
export function encodeInt(input: Uint8Array): Uint8Array;
export function enterSequence(bytes: Uint8Array, offset?: number): number;
export function skipSequence(bytes: Uint8Array, offset?: number): number;
export function skipInt(bytes: Uint8Array, offset?: number): number;
export function readBitString(bytes: Uint8Array, offset?: number): Uint8Array;
export function readInt(bytes: Uint8Array, byteOffset?: number): Uint8Array;
export function readOctetString(bytes: Uint8Array, offset?: number): Uint8Array;
export function readSequenceWith(readers: [Reader, ...Reader[]], source: Uint8Array, byteOffset?: number): Uint8Array[];
export type Reader = (bytes: Uint8Array, offset: number) => Uint8Array;
//# sourceMappingURL=asn1.d.ts.map