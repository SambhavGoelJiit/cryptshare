export const MessageSchema: Schema.VariantSchema<{
    'ucanto/message@7.0.0': Schema.StructSchema<{
        execute: Schema.Schema<API.Link<unknown, number, number, 0 | 1>[] | undefined, any>;
        delegate: Schema.Schema<Schema.Dictionary<string, API.Link<API.ReceiptModel<any, any, API.Invocation<API.Capability<API.Ability, `${string}:${string}`, unknown>>>, number, number, 1>>[] | undefined, any>;
    }, unknown>;
}, unknown>;
export function build<I extends API.Transport.Tuple<API.IssuedInvocation<API.Capability<API.Ability, `${string}:${string}`, unknown>>>, R extends API.Transport.Tuple<API.Receipt<any, any, API.Invocation<API.Capability<API.Ability, `${string}:${string}`, unknown>>, API.SigAlg>>>({ invocations, receipts }: {
    invocations?: I | undefined;
    receipts?: R | undefined;
}): Promise<API.AgentMessage<{
    In: API.InferInvocations<I>;
    Out: R;
}>>;
export function view<E = never>({ root, store }: {
    root: API.Link;
    store: DAG.BlockStore<unknown>;
}, fallback?: E | undefined): E | API.AgentMessage<any>;
import * as API from '@ucanto/interface';
import * as Schema from './schema.js';
import * as DAG from './dag.js';
//# sourceMappingURL=message.d.ts.map