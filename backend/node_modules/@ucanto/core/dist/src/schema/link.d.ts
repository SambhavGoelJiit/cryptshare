/** @type {Schema.Schema<API.Link<unknown, number, number, 0|1>, unknown>}  */
export const schema: Schema.Schema<API.Link<unknown, number, number, 0 | 1>, unknown>;
export function link(): Schema.Schema<API.Link<unknown, number, number, 0 | 1>, unknown>;
export function match<Code extends number, Alg extends number, Version extends 0 | 1>(options?: Settings<Code, Alg, Version>): Schema.Schema<API.Link<unknown, Code, Alg, Version>, any>;
export function read(input: unknown): API.Result<API.Link<unknown, number, number, 0 | 1>, API.Failure>;
export function optional(): Schema.Schema<API.Link<unknown, number, number, 0 | 1> | undefined, unknown>;
export type Settings<Code extends number = number, Alg extends number = number, Version extends 0 | 1 = 0 | 1> = {
    code?: Code;
    version?: Version;
    multihash?: {
        code?: Alg;
        digest?: Uint8Array;
    };
};
import { create } from '../link.js';
import { createLegacy } from '../link.js';
import { isLink } from '../link.js';
import { parse } from '../link.js';
import * as Schema from './schema.js';
import * as API from '@ucanto/interface';
export { create, createLegacy, isLink, parse };
//# sourceMappingURL=link.d.ts.map